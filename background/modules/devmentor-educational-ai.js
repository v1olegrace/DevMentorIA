/**
 * DevMentor AI - Chrome Built-in AI APIs Implementation
 * 
 * IMPLEMENTA√á√ÉO BASEADA NA DOCUMENTA√á√ÉO OFICIAL
 * =============================================
 * 
 * APIs UTILIZADAS (CONFORME DOCUMENTA√á√ÉO OFICIAL):
 * - Prompt API: Solicita√ß√µes em linguagem natural ao Gemini Nano
 * - Writer API: Cria√ß√£o de novos conte√∫dos conforme tarefa especificada
 * - Rewriter API: Revis√£o e reestrutura√ß√£o de textos existentes
 * - Proofreader API: Corre√ß√£o interativa de textos
 * - Summarizer API: Condensa√ß√£o de conte√∫dos longos
 * - Translator API: Tradu√ß√£o de conte√∫do din√¢mico
 * 
 * FUNCIONALIDADES √öNICAS CRIADAS:
 * - Educa√ß√£o de c√≥digo com foco real no aprendizado
 * - Tutoriais personalizados para cada c√≥digo espec√≠fico
 * - Refatora√ß√£o que ensina conceitos fundamentais
 * - Suporte multil√≠ngue para educa√ß√£o global
 * - Processamento 100% local com privacidade total
 * 
 * @version 2.0.0
 * @hackathon Chrome Built-in AI Challenge 2025
 * @author DevMentor AI Team
 */

class DevMentorEducationalAI {
  constructor() {
    this.apis = {
      prompt: null,
      writer: null,
      rewriter: null,
      proofreader: null,
      summarizer: null,
      translator: null
    };
    
    this.initialized = false;
    this.educationalMode = true;
    
    console.log('[DevMentorEducationalAI] Inicializando sistema educacional com Chrome Built-in AI');
  }

  /**
   * INICIALIZAR TODAS AS APIS CONFORME DOCUMENTA√á√ÉO OFICIAL
   */
  async initialize() {
    try {
      console.log('[DevMentorEducationalAI] Inicializando APIs conforme documenta√ß√£o oficial...');
      
      // Verificar disponibilidade das APIs
      if (!navigator.ai) {
        throw new Error('Chrome Built-in AI n√£o dispon√≠vel');
      }

      // Inicializar Prompt API (Gemini Nano integrado)
      try {
        this.apis.prompt = await navigator.ai.prompt();
        console.log('‚úÖ Prompt API (Gemini Nano) inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Prompt API n√£o dispon√≠vel:', error);
      }

      // Inicializar Writer API
      try {
        this.apis.writer = await navigator.ai.writer();
        console.log('‚úÖ Writer API inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Writer API n√£o dispon√≠vel:', error);
      }

      // Inicializar Rewriter API
      try {
        this.apis.rewriter = await navigator.ai.rewriter();
        console.log('‚úÖ Rewriter API inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Rewriter API n√£o dispon√≠vel:', error);
      }

      // Inicializar Proofreader API
      try {
        this.apis.proofreader = await navigator.ai.proofreader();
        console.log('‚úÖ Proofreader API inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Proofreader API n√£o dispon√≠vel:', error);
      }

      // Inicializar Summarizer API
      try {
        this.apis.summarizer = await navigator.ai.summarizer();
        console.log('‚úÖ Summarizer API inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Summarizer API n√£o dispon√≠vel:', error);
      }

      // Inicializar Translator API
      try {
        this.apis.translator = await navigator.ai.translator();
        console.log('‚úÖ Translator API inicializada');
      } catch (error) {
        console.warn('‚ö†Ô∏è Translator API n√£o dispon√≠vel:', error);
      }

      this.initialized = true;
      const availableAPIs = Object.values(this.apis).filter(api => api !== null).length;
      console.log(`üöÄ Sistema educacional inicializado com ${availableAPIs}/6 APIs`);
      
      return {
        success: true,
        availableAPIs,
        educationalMode: this.educationalMode
      };

    } catch (error) {
      console.error('‚ùå Erro ao inicializar sistema educacional:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * EXPLICA√á√ÉO EDUCACIONAL AVAN√áADA (Prompt API + Writer API)
   * Baseada na documenta√ß√£o: "solicita√ß√µes em linguagem natural ao Gemini Nano"
   */
  async explainCodeEducationally(code, language = 'javascript', userLevel = 'intermediate') {
    if (!this.initialized) {
      throw new Error('Sistema educacional n√£o inicializado');
    }

    try {
      const results = {};

      // 1. Explica√ß√£o educacional com Prompt API (Gemini Nano)
      if (this.apis.prompt) {
        try {
          const educationalExplanation = await this.apis.prompt({
            prompt: `Como professor de programa√ß√£o experiente, explique este c√≥digo ${language} de forma did√°tica e envolvente:

            C√≥digo:
            ${code}

            Por favor, inclua:
            1. Conceitos fundamentais aplicados
            2. Padr√µes de design identificados
            3. Boas pr√°ticas demonstradas
            4. Poss√≠veis melhorias educacionais
            5. Exerc√≠cios pr√°ticos relacionados

            N√≠vel do usu√°rio: ${userLevel}
            Foque em ensinar, n√£o apenas explicar.`,
            maxTokens: 1500,
            temperature: 0.7
          });
          
          results.educationalExplanation = educationalExplanation;
          console.log('‚úÖ Explica√ß√£o educacional gerada com Prompt API (Gemini Nano)');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Prompt API:', error);
        }
      }

      // 2. Tutorial personalizado com Writer API
      if (this.apis.writer) {
        try {
          const personalizedTutorial = await this.apis.writer({
            task: `Criar um tutorial interativo e personalizado para este c√≥digo ${language}`,
            context: {
              userLevel: userLevel,
              codeComplexity: this.analyzeComplexity(code),
              learningGoals: ['understanding', 'best-practices', 'improvement'],
              codeType: this.detectCodeType(code, language)
            },
            style: 'educational',
            format: 'step-by-step',
            includeExercises: true,
            includeExamples: true
          });
          
          results.personalizedTutorial = personalizedTutorial;
          console.log('‚úÖ Tutorial personalizado criado com Writer API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Writer API:', error);
        }
      }

      // 3. Resumo educacional com Summarizer API
      if (this.apis.summarizer) {
        try {
          const educationalSummary = await this.apis.summarizer({
            text: code,
            focus: 'educational',
            userLevel: userLevel,
            includeConcepts: true,
            includePatterns: true,
            maxLength: 200
          });
          
          results.educationalSummary = educationalSummary;
          console.log('‚úÖ Resumo educacional gerado com Summarizer API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Summarizer API:', error);
        }
      }

      return {
        success: true,
        results,
        apisUsed: Object.keys(results),
        educationalMode: true,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro na explica√ß√£o educacional:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * REFATORA√á√ÉO EDUCACIONAL (Rewriter API + Proofreader API + Prompt API)
   * Baseada na documenta√ß√£o: "revis√£o e reestrutura√ß√£o de textos existentes"
   */
  async refactorCodeEducationally(code, language = 'javascript', userLevel = 'intermediate') {
    if (!this.initialized) {
      throw new Error('Sistema educacional n√£o inicializado');
    }

    try {
      const results = {};

      // 1. Refatora√ß√£o educacional com Rewriter API
      if (this.apis.rewriter) {
        try {
          const educationalRefactor = await this.apis.rewriter({
            text: code,
            instruction: `Refatore este c√≥digo ${language} para:
            1. Melhorar performance e legibilidade
            2. Aplicar boas pr√°ticas de ${language}
            3. Tornar o c√≥digo mais educativo e compreens√≠vel
            4. Incluir coment√°rios educacionais explicativos`,
            preserveFunctionality: true,
            addExplanations: true,
            educationalMode: true,
            userLevel: userLevel
          });
          
          results.refactoredCode = educationalRefactor;
          console.log('‚úÖ Refatora√ß√£o educacional realizada com Rewriter API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Rewriter API:', error);
        }
      }

      // 2. Corre√ß√£o educacional com Proofreader API
      if (this.apis.proofreader) {
        try {
          const educationalCorrection = await this.apis.proofreader({
            text: code,
            language: language,
            checks: ['syntax', 'style', 'best-practices', 'security', 'performance'],
            mode: 'educational',
            explanations: true,
            userLevel: userLevel,
            includeSuggestions: true
          });
          
          results.educationalCorrections = educationalCorrection;
          console.log('‚úÖ Corre√ß√µes educacionais aplicadas com Proofreader API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Proofreader API:', error);
        }
      }

      // 3. Explica√ß√£o das mudan√ßas com Prompt API
      if (this.apis.prompt) {
        try {
          const changeExplanation = await this.apis.prompt({
            prompt: `Explique de forma educacional por que cada mudan√ßa foi feita na refatora√ß√£o deste c√≥digo ${language}:

            C√≥digo original:
            ${code}

            C√≥digo refatorado:
            ${results.refactoredCode || code}

            Por favor, explique:
            1. Por que cada mudan√ßa foi necess√°ria
            2. Quais conceitos de programa√ß√£o foram aplicados
            3. Como isso melhora o c√≥digo
            4. O que o usu√°rio pode aprender com isso

            N√≠vel do usu√°rio: ${userLevel}`,
            maxTokens: 1000,
            temperature: 0.6
          });
          
          results.changeExplanation = changeExplanation;
          console.log('‚úÖ Explica√ß√£o das mudan√ßas gerada com Prompt API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Prompt API:', error);
        }
      }

      return {
        success: true,
        results,
        apisUsed: Object.keys(results),
        educationalMode: true,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro na refatora√ß√£o educacional:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * EDUCA√á√ÉO MULTIL√çNGUE (Translator API + Writer API + Summarizer API)
   * Baseada na documenta√ß√£o: "tradu√ß√£o de conte√∫do din√¢mico sob demanda"
   */
  async provideMultilingualEducation(code, language = 'javascript', targetLanguage = 'pt-BR', userLevel = 'intermediate') {
    if (!this.initialized) {
      throw new Error('Sistema educacional n√£o inicializado');
    }

    try {
      const results = {};

      // 1. Tradu√ß√£o educacional com Translator API
      if (this.apis.translator) {
        try {
          const educationalTranslation = await this.apis.translator({
            text: code,
            targetLanguage: targetLanguage,
            context: 'programming',
            preserveCodeStructure: true,
            translateComments: true,
            translateDocumentation: true,
            educationalMode: true
          });
          
          results.translatedCode = educationalTranslation;
          console.log('‚úÖ Tradu√ß√£o educacional realizada com Translator API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Translator API:', error);
        }
      }

      // 2. Tutoriais localizados com Writer API
      if (this.apis.writer) {
        try {
          const localizedTutorial = await this.apis.writer({
            task: `Criar tutorial educacional em ${targetLanguage} para este c√≥digo ${language}`,
            language: targetLanguage,
            style: 'educational',
            format: 'localized',
            culturalContext: this.getCulturalContext(targetLanguage),
            userLevel: userLevel
          });
          
          results.localizedTutorial = localizedTutorial;
          console.log('‚úÖ Tutorial localizado criado com Writer API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Writer API:', error);
        }
      }

      // 3. Resumos multil√≠ngues com Summarizer API
      if (this.apis.summarizer) {
        try {
          const multilingualSummary = await this.apis.summarizer({
            text: code,
            language: targetLanguage,
            focus: 'educational',
            culturalContext: this.getCulturalContext(targetLanguage),
            userLevel: userLevel,
            maxLength: 150
          });
          
          results.multilingualSummary = multilingualSummary;
          console.log('‚úÖ Resumo multil√≠ngue gerado com Summarizer API');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na Summarizer API:', error);
        }
      }

      return {
        success: true,
        results,
        apisUsed: Object.keys(results),
        targetLanguage: targetLanguage,
        educationalMode: true,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro na educa√ß√£o multil√≠ngue:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * AN√ÅLISE EDUCACIONAL COMPLETA (Todas as APIs)
   * Demonstra√ß√£o completa das capacidades educacionais
   */
  async performCompleteEducationalAnalysis(code, language = 'javascript', userLevel = 'intermediate', targetLanguage = 'pt-BR') {
    if (!this.initialized) {
      throw new Error('Sistema educacional n√£o inicializado');
    }

    try {
      console.log('üéì Iniciando an√°lise educacional completa...');
      
      const results = {};

      // Executar todas as an√°lises em paralelo
      const analysisPromises = [
        this.explainCodeEducationally(code, language, userLevel),
        this.refactorCodeEducationally(code, language, userLevel),
        this.provideMultilingualEducation(code, language, targetLanguage, userLevel)
      ];

      const analysisResults = await Promise.allSettled(analysisPromises);
      
      analysisResults.forEach((result, index) => {
        if (result.status === 'fulfilled' && result.value.success) {
          const analysisType = ['explanation', 'refactoring', 'multilingual'][index];
          results[analysisType] = result.value.results;
        }
      });

      // Combinar resultados de forma educacional
      const completeEducationalAnalysis = {
        overview: results.explanation?.educationalSummary || 'An√°lise educacional n√£o dispon√≠vel',
        detailedExplanation: results.explanation?.educationalExplanation || 'Explica√ß√£o detalhada n√£o dispon√≠vel',
        personalizedTutorial: results.explanation?.personalizedTutorial || 'Tutorial n√£o dispon√≠vel',
        refactoredCode: results.refactoring?.refactoredCode || 'Refatora√ß√£o n√£o dispon√≠vel',
        changeExplanation: results.refactoring?.changeExplanation || 'Explica√ß√£o das mudan√ßas n√£o dispon√≠vel',
        multilingualSupport: results.multilingual?.translatedCode || 'Suporte multil√≠ngue n√£o dispon√≠vel',
        localizedTutorial: results.multilingual?.localizedTutorial || 'Tutorial localizado n√£o dispon√≠vel',
        apisUsed: Object.keys(results).length,
        educationalMode: true,
        timestamp: new Date().toISOString()
      };

      console.log(`üéì An√°lise educacional completa conclu√≠da usando ${Object.keys(results).length} tipos de an√°lise`);
      
      return {
        success: true,
        results: completeEducationalAnalysis,
        apisUsed: Object.keys(results),
        educationalMode: true,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro na an√°lise educacional completa:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * UTILIT√ÅRIOS EDUCADORES
   */
  analyzeComplexity(code) {
    // An√°lise simples de complexidade para personaliza√ß√£o
    const lines = code.split('\n').length;
    const functions = (code.match(/function|=>|class/g) || []).length;
    
    if (lines < 20 && functions < 3) return 'beginner';
    if (lines < 50 && functions < 8) return 'intermediate';
    return 'advanced';
  }

  detectCodeType(code, language) {
    // Detec√ß√£o simples do tipo de c√≥digo
    if (code.includes('class ') || code.includes('interface ')) return 'oop';
    if (code.includes('function ') || code.includes('=>')) return 'functional';
    if (code.includes('async ') || code.includes('await ')) return 'asynchronous';
    return 'procedural';
  }

  getCulturalContext(language) {
    // Contexto cultural para localiza√ß√£o
    const contexts = {
      'pt-BR': 'brasileiro',
      'en-US': 'americano',
      'es-ES': 'espanhol',
      'fr-FR': 'franc√™s',
      'de-DE': 'alem√£o'
    };
    return contexts[language] || 'internacional';
  }

  /**
   * VERIFICAR STATUS DO SISTEMA EDUCACIONAL
   */
  getEducationalStatus() {
    const status = {
      initialized: this.initialized,
      educationalMode: this.educationalMode,
      apis: {}
    };

    Object.keys(this.apis).forEach(apiName => {
      status.apis[apiName] = this.apis[apiName] !== null;
    });

    return status;
  }
}

// Exportar para uso em outros m√≥dulos
export { DevMentorEducationalAI };
