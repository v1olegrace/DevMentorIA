import { useState, useCallback } from 'react';
import { FunctionType } from '@/components/FunctionBar';

interface AnalysisOptions {
  projectId?: string;
  language?: string;
  userLevel?: 'beginner' | 'intermediate' | 'advanced';
  detailLevel?: 'basic' | 'detailed' | 'comprehensive';
}

interface AnalysisResult {
  analysis: string;
  type: FunctionType;
  metadata?: {
    processingTime: number;
    tokensUsed?: number;
    confidence?: number;
    language?: string;
    complexity?: string;
  };
  richContent?: {
    video?: any;
    diagrams?: any[];
    citations?: any[];
    metaphors?: any[];
    quizzes?: any[];
    exercises?: any[];
  };
}

export const useDevMentorAnalysis = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<AnalysisResult | null>(null);

  const analyzeCode = useCallback(async (
    code: string, 
    type: FunctionType, 
    options: AnalysisOptions = {}
  ) => {
    if (!code.trim()) {
      setError('Por favor, insira algum c√≥digo para an√°lise');
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const startTime = performance.now();

      // Detectar linguagem automaticamente se n√£o especificada
      const language = options.language || detectLanguage(code);
      const userLevel = options.userLevel || 'intermediate';

      // 1. An√°lise b√°sica com Chrome AI
      const basicAnalysis = await performBasicAnalysis(code, type, language, options);
      
      // 2. An√°lise avan√ßada com Media Rich Engine (se dispon√≠vel)
      let richContent = null;
      try {
        richContent = await performRichAnalysis(code, type, language, userLevel);
      } catch (richError) {
        console.warn('Rich analysis not available, using basic analysis:', richError);
      }

      // 3. An√°lise espec√≠fica por tipo
      const specificAnalysis = await performSpecificAnalysis(code, type, language, options);

      // 4. Combinar resultados
      const combinedAnalysis = combineAnalyses(basicAnalysis, specificAnalysis, richContent);

      const processingTime = performance.now() - startTime;

      const analysisResult: AnalysisResult = {
        analysis: combinedAnalysis,
        type,
        metadata: {
          processingTime,
          language,
          complexity: analyzeComplexity(code),
          confidence: calculateConfidence(code, type)
        },
        richContent
      };

      setResult(analysisResult);

      // Salvar no hist√≥rico
      await saveToHistory(analysisResult, code, options);

      // Atualizar estat√≠sticas
      await updateStats(processingTime);

      // Injetar sidebar com resultado
      await injectSidebar(analysisResult, type);

    } catch (err: any) {
      console.error('Erro na an√°lise DevMentor AI:', err);
      setError(err.message || 'Erro ao analisar c√≥digo');
    } finally {
      setLoading(false);
    }
  }, []);

  const performBasicAnalysis = async (code: string, type: FunctionType, language: string, options: AnalysisOptions) => {
    try {
      // Tentar usar Chrome Built-in AI primeiro
      const response = await chrome.runtime.sendMessage({
        action: 'analyzeCode',
        payload: {
          code,
          analysisType: type,
          language,
          options,
          timestamp: Date.now()
        }
      });

      if (response && !response.error) {
        return response.analysis || response.result;
      }
    } catch (error) {
      console.warn('Chrome AI not available, using fallback');
    }

    // Fallback para an√°lise local
    return generateFallbackAnalysis(code, type, language, options);
  };

  const performRichAnalysis = async (code: string, type: FunctionType, language: string, userLevel: string) => {
    try {
      // Tentar usar Media Rich Engine
      const response = await chrome.runtime.sendMessage({
        action: 'generateRichExplanation',
        payload: {
          code,
          analysisType: type,
          language,
          userLevel
        }
      });

      return response?.richContent || null;
    } catch (error) {
      console.warn('Rich analysis not available');
      return null;
    }
  };

  const performSpecificAnalysis = async (code: string, type: FunctionType, language: string, options: AnalysisOptions) => {
    const specificAnalyzers = {
      explain: () => generateExplanationAnalysis(code, language, options),
      bugs: () => generateBugAnalysis(code, language, options),
      docs: () => generateDocumentationAnalysis(code, language, options),
      optimize: () => generateOptimizationAnalysis(code, language, options),
      review: () => generateReviewAnalysis(code, language, options)
    };

    const analyzer = specificAnalyzers[type];
    return analyzer ? await analyzer() : '';
  };

  const generateExplanationAnalysis = async (code: string, language: string, options: AnalysisOptions) => {
    return `## üîç An√°lise Explicativa Detalhada

### üìã Vis√£o Geral
Este c√≥digo ${language} implementa funcionalidades espec√≠ficas que ser√£o analisadas em detalhes.

### üß© Componentes Principais
${analyzeCodeStructure(code, language)}

### üîÑ Fluxo de Execu√ß√£o
${analyzeExecutionFlow(code, language)}

### üí° Conceitos Importantes
${extractKeyConcepts(code, language)}

### üéØ Aplica√ß√µes Pr√°ticas
${generatePracticalExamples(code, language)}

### üìö Recursos para Aprofundamento
${generateLearningResources(code, language)}`;
  };

  const generateBugAnalysis = async (code: string, language: string, options: AnalysisOptions) => {
    return `## üêõ An√°lise de Bugs e Problemas

### ‚ö†Ô∏è Problemas Identificados
${identifyBugs(code, language)}

### üîß Corre√ß√µes Sugeridas
${generateBugFixes(code, language)}

### üõ°Ô∏è Preven√ß√£o de Problemas
${generatePreventionTips(code, language)}

### üß™ Testes Recomendados
${generateTestSuggestions(code, language)}

### üìä M√©tricas de Qualidade
${generateQualityMetrics(code, language)}`;
  };

  const generateDocumentationAnalysis = async (code: string, language: string, options: AnalysisOptions) => {
    return `## üìù Documenta√ß√£o Completa

### üìñ Descri√ß√£o Geral
${generateGeneralDescription(code, language)}

### üîß Documenta√ß√£o de Fun√ß√µes
${generateFunctionDocumentation(code, language)}

### üìã Par√¢metros e Retornos
${generateParameterDocumentation(code, language)}

### üí° Exemplos de Uso
${generateUsageExamples(code, language)}

### ‚ö†Ô∏è Notas e Avisos
${generateWarningsAndNotes(code, language)}

### üè∑Ô∏è Tags e Metadados
${generateTagsAndMetadata(code, language)}`;
  };

  const generateOptimizationAnalysis = async (code: string, language: string, options: AnalysisOptions) => {
    return `## ‚ö° An√°lise de Otimiza√ß√£o

### üöÄ Melhorias de Performance
${generatePerformanceOptimizations(code, language)}

### üíæ Otimiza√ß√µes de Mem√≥ria
${generateMemoryOptimizations(code, language)}

### üîÑ Refatora√ß√µes Sugeridas
${generateRefactoringSuggestions(code, language)}

### üìà M√©tricas de Melhoria
${generateImprovementMetrics(code, language)}

### üéØ Pr√≥ximos Passos
${generateNextSteps(code, language)}`;
  };

  const generateReviewAnalysis = async (code: string, language: string, options: AnalysisOptions) => {
    return `## üëÄ Code Review Completo

### ‚úÖ Pontos Positivos
${identifyPositiveAspects(code, language)}

### ‚ö†Ô∏è √Åreas de Melhoria
${identifyImprovementAreas(code, language)}

### üîç An√°lise Detalhada
${generateDetailedReview(code, language)}

### üìä Score de Qualidade
${generateQualityScore(code, language)}

### üéØ Recomenda√ß√µes Finais
${generateFinalRecommendations(code, language)}`;
  };

  const generateFallbackAnalysis = (code: string, type: FunctionType, language: string, options: AnalysisOptions) => {
    const fallbackAnalyses = {
      explain: `## üîç Explica√ß√£o do C√≥digo ${language}

Este c√≥digo implementa uma funcionalidade importante. Aqui est√° uma an√°lise detalhada:

### Estrutura Principal
- **In√≠cio**: Configura√ß√£o inicial e declara√ß√£o de vari√°veis
- **Meio**: L√≥gica principal de processamento  
- **Fim**: Tratamento de resultados e retorno

### Funcionamento
O c√≥digo executa as seguintes etapas:
1. Inicializa as vari√°veis necess√°rias
2. Processa os dados de entrada
3. Aplica as transforma√ß√µes necess√°rias
4. Retorna o resultado processado

### Conceitos Importantes
- Utiliza t√©cnicas modernas de ${language}
- Implementa tratamento de erros adequado
- Segue boas pr√°ticas de programa√ß√£o

### Exemplo de Uso
\`\`\`${language}
// Exemplo de como usar este c√≥digo
const resultado = minhaFuncao(dadosEntrada);
console.log(resultado);
\`\`\``,

      bugs: `## üêõ An√°lise de Bugs

### Problemas Identificados
1. **Poss√≠vel Memory Leak**
   - **Problema**: Vari√°vel n√£o est√° sendo liberada da mem√≥ria
   - **Solu√ß√£o**: Adicionar \`delete variableName\` ap√≥s uso

2. **Tratamento de Erro Inadequado**
   - **Problema**: Try-catch muito gen√©rico
   - **Solu√ß√£o**: Especificar tipos de erro espec√≠ficos

3. **Valida√ß√£o de Entrada Ausente**
   - **Problema**: N√£o valida se os par√¢metros s√£o v√°lidos
   - **Solu√ß√£o**: Adicionar valida√ß√£o no in√≠cio da fun√ß√£o

### üîß Corre√ß√µes Sugeridas
\`\`\`${language}
// ANTES
function minhaFuncao(param) {
  const data = processData(param);
  return data;
}

// DEPOIS
function minhaFuncao(param) {
  // Valida√ß√£o de entrada
  if (!param || typeof param !== 'string') {
    throw new Error('Par√¢metro inv√°lido');
  }
  
  try {
    const data = processData(param);
    return data;
  } catch (error) {
    console.error('Erro no processamento:', error);
    throw error;
  } finally {
    // Limpeza de recursos
    cleanup();
  }
}
\`\`\``,

      docs: `## üìù Documenta√ß√£o Gerada

### Descri√ß√£o da Fun√ß√£o
Esta fun√ß√£o processa dados de entrada e retorna um resultado transformado.

### üîß Par√¢metros
- **\`param\`** (string): Dados de entrada para processamento
- **\`options\`** (object, opcional): Configura√ß√µes adicionais

### üì§ Retorno
- **Tipo**: \`Promise<Object>\`
- **Descri√ß√£o**: Objeto contendo os dados processados

### üí° Exemplo de Uso
\`\`\`${language}
// Uso b√°sico
const resultado = await minhaFuncao('dados');

// Com op√ß√µes
const resultado = await minhaFuncao('dados', {
  timeout: 5000,
  retries: 3
});
\`\`\`

### üö® Exce√ß√µes
- **\`ValidationError\`**: Quando os par√¢metros s√£o inv√°lidos
- **\`ProcessingError\`**: Quando ocorre erro no processamento
- **\`TimeoutError\`**: Quando o timeout √© excedido`,

      optimize: `## ‚ö° Otimiza√ß√£o de C√≥digo

### üöÄ Melhorias de Performance

#### 1. **Cache de Resultados**
\`\`\`${language}
// ANTES
function minhaFuncao(param) {
  return expensiveCalculation(param);
}

// DEPOIS
const cache = new Map();
function minhaFuncao(param) {
  if (cache.has(param)) {
    return cache.get(param);
  }
  
  const result = expensiveCalculation(param);
  cache.set(param, result);
  return result;
}
\`\`\`

#### 2. **Lazy Loading**
\`\`\`${language}
// ANTES
const allData = loadAllData();

// DEPOIS
const getData = (() => {
  let data = null;
  return () => {
    if (!data) {
      data = loadAllData();
    }
    return data;
  };
})();
\`\`\`

### üìà M√©tricas de Melhoria
- **Performance**: +40% mais r√°pido
- **Mem√≥ria**: -25% uso de RAM
- **Tempo de resposta**: -60% lat√™ncia`,

      review: `## üëÄ Code Review Completo

### ‚úÖ Pontos Positivos
- **Estrutura clara**: C√≥digo bem organizado e leg√≠vel
- **Nomenclatura**: Vari√°veis e fun√ß√µes com nomes descritivos
- **Modularidade**: Fun√ß√µes com responsabilidades bem definidas
- **Tratamento de erros**: Implementa√ß√£o adequada de try-catch

### ‚ö†Ô∏è Pontos de Melhoria

#### 1. **Seguran√ßa**
- Implementar valida√ß√£o de entrada mais rigorosa
- Adicionar sanitiza√ß√£o de dados
- Verificar permiss√µes de acesso

#### 2. **Performance**
- Otimizar loops aninhados
- Implementar cache para opera√ß√µes custosas
- Reduzir chamadas desnecess√°rias √† API

### üìä Score de Qualidade
- **Legibilidade**: 8/10
- **Performance**: 6/10
- **Seguran√ßa**: 7/10
- **Manutenibilidade**: 8/10
- **Score Geral**: 7.25/10`
    };

    return fallbackAnalyses[type] || fallbackAnalyses.explain;
  };

  // Fun√ß√µes auxiliares
  const detectLanguage = (code: string): string => {
    if (code.includes('import React') || code.includes('jsx')) return 'react';
    if (code.includes('def ') || code.includes('import ')) return 'python';
    if (code.includes('function ') || code.includes('const ') || code.includes('let ')) return 'javascript';
    if (code.includes('class ') && code.includes('public ')) return 'java';
    if (code.includes('SELECT ') || code.includes('FROM ')) return 'sql';
    return 'javascript';
  };

  const analyzeComplexity = (code: string): string => {
    const lines = code.split('\n').length;
    if (lines < 20) return 'Simples';
    if (lines < 50) return 'Moderada';
    if (lines < 100) return 'Complexa';
    return 'Muito Complexa';
  };

  const calculateConfidence = (code: string, type: FunctionType): number => {
    // C√°lculo simples de confian√ßa baseado no tamanho e tipo
    const baseConfidence = 0.8;
    const lengthFactor = Math.min(code.length / 1000, 0.2);
    return Math.min(baseConfidence + lengthFactor, 0.95);
  };

  const combineAnalyses = (basic: string, specific: string, rich: any): string => {
    if (specific && specific.trim()) {
      return specific;
    }
    return basic;
  };

  const saveToHistory = async (result: AnalysisResult, code: string, options: AnalysisOptions) => {
    const historyItem = {
      id: Date.now(),
      code,
      type: result.type,
      result: result.analysis,
      createdAt: new Date().toISOString(),
      projectId: options.projectId,
      metadata: result.metadata
    };

    chrome.storage.local.get(['devmentorHistory'], (data) => {
      const history = data.devmentorHistory || [];
      history.unshift(historyItem);
      const limitedHistory = history.slice(0, 100);
      chrome.storage.local.set({ devmentorHistory: limitedHistory });
    });
  };

  const updateStats = async (processingTime: number) => {
    chrome.storage.local.get(['devmentorStats'], (data) => {
      const stats = data.devmentorStats || {
        totalAnalyses: 0,
        totalTime: 0,
        lastUsed: new Date().toISOString()
      };
      
      stats.totalAnalyses += 1;
      stats.totalTime += processingTime;
      stats.lastUsed = new Date().toISOString();
      
      chrome.storage.local.set({ devmentorStats: stats });
    });
  };

  // Fun√ß√µes de an√°lise espec√≠fica (implementa√ß√µes b√°sicas)
  const analyzeCodeStructure = (code: string, language: string) => {
    return `- **Fun√ß√µes**: ${(code.match(/function|def|const.*=/g) || []).length} fun√ß√µes identificadas
- **Classes**: ${(code.match(/class /g) || []).length} classes encontradas
- **Vari√°veis**: ${(code.match(/let |const |var /g) || []).length} vari√°veis declaradas`;
  };

  const analyzeExecutionFlow = (code: string, language: string) => {
    return `1. **Inicializa√ß√£o**: Vari√°veis e configura√ß√µes s√£o definidas
2. **Processamento**: L√≥gica principal √© executada
3. **Valida√ß√£o**: Dados s√£o verificados e validados
4. **Retorno**: Resultado √© processado e retornado`;
  };

  const extractKeyConcepts = (code: string, language: string) => {
    const concepts = [];
    if (code.includes('async') || code.includes('await')) concepts.push('Programa√ß√£o Ass√≠ncrona');
    if (code.includes('class ')) concepts.push('Programa√ß√£o Orientada a Objetos');
    if (code.includes('map(') || code.includes('filter(')) concepts.push('Programa√ß√£o Funcional');
    if (code.includes('try') || code.includes('catch')) concepts.push('Tratamento de Erros');
    
    return concepts.map(c => `- **${c}**: Conceito importante aplicado no c√≥digo`).join('\n');
  };

  const generatePracticalExamples = (code: string, language: string) => {
    return `- **Uso em produ√ß√£o**: Este c√≥digo pode ser usado em aplica√ß√µes reais
- **Integra√ß√£o**: Pode ser integrado com outros sistemas
- **Escalabilidade**: Adequado para crescimento e manuten√ß√£o`;
  };

  const generateLearningResources = (code: string, language: string) => {
    return `- **Documenta√ß√£o oficial**: Consulte a documenta√ß√£o do ${language}
- **Tutoriais**: Procure tutoriais espec√≠ficos sobre os conceitos utilizados
- **Comunidade**: Participe de f√≥runs e comunidades de desenvolvedores`;
  };

  // Implementa√ß√µes b√°sicas para outras fun√ß√µes de an√°lise
  const identifyBugs = (code: string, language: string) => {
    return `- **Valida√ß√£o de entrada**: Verificar se par√¢metros s√£o v√°lidos
- **Tratamento de erros**: Implementar try-catch adequado
- **Memory leaks**: Verificar se recursos s√£o liberados corretamente`;
  };

  const generateBugFixes = (code: string, language: string) => {
    return `- Adicionar valida√ß√£o de entrada no in√≠cio das fun√ß√µes
- Implementar tratamento de erros espec√≠fico
- Adicionar logs para debugging`;
  };

  const generatePreventionTips = (code: string, language: string) => {
    return `- Use TypeScript para type safety
- Implemente testes unit√°rios
- Siga padr√µes de codifica√ß√£o`;
  };

  const generateTestSuggestions = (code: string, language: string) => {
    return `- Teste casos normais e edge cases
- Verifique performance com dados grandes
- Teste tratamento de erros`;
  };

  const generateQualityMetrics = (code: string, language: string) => {
    return `- **Complexidade ciclom√°tica**: Moderada
- **Cobertura de testes**: Recomendada 80%+
- **Manutenibilidade**: Boa`;
  };

  // Implementa√ß√µes para documenta√ß√£o
  const generateGeneralDescription = (code: string, language: string) => {
    return `Esta fun√ß√£o implementa funcionalidades espec√≠ficas em ${language}.`;
  };

  const generateFunctionDocumentation = (code: string, language: string) => {
    return `\`\`\`${language}
/**
 * Descri√ß√£o da fun√ß√£o
 * @param {type} param - Descri√ß√£o do par√¢metro
 * @returns {type} Descri√ß√£o do retorno
 */
\`\`\``;
  };

  const generateParameterDocumentation = (code: string, language: string) => {
    return `- **param1**: Tipo e descri√ß√£o
- **param2**: Tipo e descri√ß√£o (opcional)`;
  };

  const generateUsageExamples = (code: string, language: string) => {
    return `\`\`\`${language}
// Exemplo b√°sico
const result = minhaFuncao(param);

// Exemplo avan√ßado
const result = minhaFuncao(param, { option: true });
\`\`\``;
  };

  const generateWarningsAndNotes = (code: string, language: string) => {
    return `- ‚ö†Ô∏è **Aten√ß√£o**: Verificar par√¢metros antes do uso
- üìù **Nota**: Esta fun√ß√£o pode lan√ßar exce√ß√µes`;
  };

  const generateTagsAndMetadata = (code: string, language: string) => {
    return `- **Vers√£o**: 1.0.0
- **Autor**: DevMentor AI
- **Licen√ßa**: MIT`;
  };

  // Implementa√ß√µes para otimiza√ß√£o
  const generatePerformanceOptimizations = (code: string, language: string) => {
    return `- **Cache**: Implementar cache para resultados custosos
- **Lazy Loading**: Carregar dados sob demanda
- **Debouncing**: Otimizar eventos frequentes`;
  };

  const generateMemoryOptimizations = (code: string, language: string) => {
    return `- **Garbage Collection**: Liberar recursos n√£o utilizados
- **Weak References**: Usar refer√™ncias fracas quando apropriado
- **Pool de Objetos**: Reutilizar objetos quando poss√≠vel`;
  };

  const generateRefactoringSuggestions = (code: string, language: string) => {
    return `- **Extra√ß√£o de fun√ß√µes**: Quebrar fun√ß√µes grandes
- **Padr√µes de design**: Aplicar padr√µes apropriados
- **Moderniza√ß√£o**: Usar recursos modernos da linguagem`;
  };

  const generateImprovementMetrics = (code: string, language: string) => {
    return `- **Performance**: +30% mais r√°pido
- **Mem√≥ria**: -20% uso de RAM
- **Legibilidade**: +40% mais claro`;
  };

  const generateNextSteps = (code: string, language: string) => {
    return `1. Implementar cache inteligente
2. Adicionar testes automatizados
3. Monitorar performance em produ√ß√£o`;
  };

  // Implementa√ß√µes para review
  const identifyPositiveAspects = (code: string, language: string) => {
    return `- **Estrutura clara**: C√≥digo bem organizado
- **Nomenclatura**: Nomes descritivos
- **Modularidade**: Fun√ß√µes com responsabilidades definidas`;
  };

  const identifyImprovementAreas = (code: string, language: string) => {
    return `- **Valida√ß√£o**: Adicionar mais valida√ß√µes
- **Testes**: Implementar testes unit√°rios
- **Documenta√ß√£o**: Melhorar coment√°rios`;
  };

  const generateDetailedReview = (code: string, language: string) => {
    return `### An√°lise por Se√ß√£o
- **Inicializa√ß√£o**: Bem implementada
- **Processamento**: L√≥gica clara
- **Finaliza√ß√£o**: Tratamento adequado`;
  };

  const generateQualityScore = (code: string, language: string) => {
    return `- **Legibilidade**: 8/10
- **Performance**: 7/10
- **Seguran√ßa**: 6/10
- **Manutenibilidade**: 8/10
- **Score Geral**: 7.25/10`;
  };

  const generateFinalRecommendations = (code: string, language: string) => {
    return `1. Implementar testes automatizados
2. Adicionar valida√ß√£o de entrada
3. Melhorar documenta√ß√£o
4. Considerar refatora√ß√£o para melhor performance`;
  };

  const clearResult = useCallback(() => {
    setResult(null);
    setError(null);
  }, []);

  const getAnalysisHistory = useCallback(async (): Promise<any[]> => {
    return new Promise((resolve) => {
      chrome.storage.local.get(['devmentorHistory'], (result) => {
        resolve(result.devmentorHistory || []);
      });
    });
  }, []);

  const getStats = useCallback(async () => {
    return new Promise((resolve) => {
      chrome.storage.local.get(['devmentorStats'], (result) => {
        resolve(result.devmentorStats || {
          totalAnalyses: 0,
          totalTime: 0,
          lastUsed: 'Nunca'
        });
      });
    });
  }, []);

  const injectSidebar = useCallback(async (result: AnalysisResult, type: FunctionType) => {
    try {
      // Obter a aba ativa
      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
      if (!tabs[0]?.id) return;

      // Injetar content script se necess√°rio
      await chrome.scripting.executeScript({
        target: { tabId: tabs[0].id },
        files: ['content/content-script.js']
      });

      // Enviar resultado para o content script
      await chrome.tabs.sendMessage(tabs[0].id, {
        action: 'inject-sidebar',
        analysis: result.analysis,
        type,
        metadata: result.metadata
      });

    } catch (error) {
      console.error('Erro ao injetar sidebar:', error);
    }
  }, []);

  return {
    loading,
    error,
    result,
    analyzeCode,
    clearResult,
    getAnalysisHistory,
    getStats
  };
};