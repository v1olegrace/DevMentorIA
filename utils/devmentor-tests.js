/**
 * DevMentor AI - Teste Completo do Sistema
 * Arquivo para testar todas as funcionalidades implementadas
 */

// ========================================
// TESTE COMPLETO DO SISTEMA
// ========================================

async function testarSistemaCompleto() {
  console.log('🧪 === TESTE COMPLETO DO DEVMENTOR AI ===\n');
  
  try {
    // 1. Testar inicialização do sistema
    console.log('1️⃣ TESTANDO INICIALIZAÇÃO...');
    const inicializado = await window.DevMentorHelpers.initializeMediaRichSystem();
    
    if (inicializado) {
      console.log('✅ Sistema inicializado com sucesso!');
    } else {
      console.log('❌ Falha na inicialização do sistema');
      return;
    }
    
    // 2. Verificar status de todos os componentes
    console.log('\n2️⃣ VERIFICANDO COMPONENTES...');
    const status = window.DevMentorHelpers.getMediaRichSystemStatus();
    
    const componentes = [
      { nome: 'MediaRichEngine', status: status.mediaRichEngine },
      { nome: 'CitationEngine', status: status.citationEngine },
      { nome: 'InteractivePlayground', status: status.interactivePlayground },
      { nome: 'VisualMetaphorEngine', status: status.visualMetaphorEngine },
      { nome: 'DiagramGenerator', status: status.diagramGenerator },
      { nome: 'AIVideoGenerator', status: status.aiVideoGenerator },
      { nome: 'QuizGenerator', status: status.quizGenerator },
      { nome: 'GeminiProIntegration', status: status.geminiProIntegration },
      { nome: 'CompleteMediaRichDemo', status: status.completeMediaRichDemo },
      { nome: 'DevMentorIndex', status: status.devMentorIndex },
      { nome: 'Estilos CSS', status: status.stylesLoaded }
    ];
    
    componentes.forEach(comp => {
      console.log(`${comp.status ? '✅' : '❌'} ${comp.nome}`);
    });
    
    console.log(`\n🎯 Sistema Completo: ${status.allComponentsLoaded ? '✅' : '❌'}`);
    
    // 3. Testar geração de explicação rica
    console.log('\n3️⃣ TESTANDO GERAÇÃO DE EXPLICAÇÃO RICA...');
    
    const codigoTeste = `
async function fetchUserData(userId) {
  try {
    const response = await fetch(\`/api/users/\${userId}\`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Erro:', error);
    throw error;
  }
}
    `;
    
    const explicacao = await window.DevMentorHelpers.generateRichExplanation(
      codigoTeste,
      'complexity',
      'javascript',
      'intermediate'
    );
    
    console.log(`✅ Explicação gerada: ${explicacao.length} caracteres`);
    console.log(`🎬 Inclui vídeo: ${explicacao.includes('video') ? 'Sim' : 'Não'}`);
    console.log(`📚 Inclui citações: ${explicacao.includes('citations') ? 'Sim' : 'Não'}`);
    console.log(`🎮 Inclui playground: ${explicacao.includes('playground') ? 'Sim' : 'Não'}`);
    console.log(`🎨 Inclui metáforas: ${explicacao.includes('metaphor') ? 'Sim' : 'Não'}`);
    console.log(`📊 Inclui diagramas: ${explicacao.includes('mermaid') ? 'Sim' : 'Não'}`);
    console.log(`✅ Inclui quizzes: ${explicacao.includes('quiz') ? 'Sim' : 'Não'}`);
    
    // 4. Testar componentes individuais
    console.log('\n4️⃣ TESTANDO COMPONENTES INDIVIDUAIS...');
    
    // CitationEngine
    if (window.citationEngine) {
      const conceitos = [
        { name: 'async/await', confidence: 0.9 },
        { name: 'promises', confidence: 0.8 }
      ];
      
      const citacoes = await window.citationEngine.findCitations(conceitos, 'javascript');
      const totalCitacoes = Object.values(citacoes).reduce((total, cat) => total + (cat ? cat.length : 0), 0);
      console.log(`📚 CitationEngine: ${totalCitacoes} citações encontradas`);
    }
    
    // VisualMetaphorEngine
    if (window.visualMetaphorEngine) {
      const metafora = window.visualMetaphorEngine.getMetaphor('async_await');
      console.log(`🎨 VisualMetaphorEngine: ${metafora ? 'Metáfora encontrada' : 'Nenhuma metáfora'}`);
    }
    
    // DiagramGenerator
    if (window.diagramGenerator) {
      const diagrama = await window.diagramGenerator.autoGenerateDiagram(codigoTeste, 'complexity');
      console.log(`📊 DiagramGenerator: ${diagrama ? `Diagrama ${diagrama.type} gerado` : 'Nenhum diagrama'}`);
    }
    
    // QuizGenerator
    if (window.quizGenerator) {
      const conceitos = [{ name: 'async/await', confidence: 0.9 }];
      const quizzes = await window.quizGenerator.generateQuizzes(conceitos, 'intermediate');
      console.log(`✅ QuizGenerator: ${quizzes.length} quizzes gerados`);
    }
    
    // 5. Testar playground
    console.log('\n5️⃣ TESTANDO PLAYGROUND...');
    
    if (window.interactivePlayground) {
      const playgroundHTML = window.interactivePlayground.createPlayground(
        'console.log("Hello World!");',
        'javascript',
        { showVisualizer: true }
      );
      console.log(`🎮 InteractivePlayground: ${playgroundHTML.length} caracteres gerados`);
    }
    
    // 6. Testar Gemini Pro (se configurado)
    console.log('\n6️⃣ TESTANDO GEMINI PRO...');
    
    if (window.geminiProIntegration) {
      const geminiStatus = window.geminiProIntegration.getStatus();
      console.log(`🤖 Gemini Pro: ${geminiStatus.isConfigured ? 'Configurado' : 'Não configurado'}`);
      
      if (geminiStatus.isConfigured) {
        try {
          const explicacaoInteligente = await window.geminiProIntegration.generateIntelligentExplanation(
            codigoTeste,
            'javascript',
            'complexity',
            'intermediate'
          );
          console.log(`🧠 Explicação inteligente: ${explicacaoInteligente.mainConcept ? 'Gerada' : 'Não gerada'}`);
        } catch (error) {
          console.log(`⚠️ Erro no Gemini Pro: ${error.message}`);
        }
      } else {
        console.log('💡 Para testar Gemini Pro, configure com: window.geminiProIntegration.configure("sua-api-key")');
      }
    }
    
    // 7. Testar demo
    console.log('\n7️⃣ TESTANDO DEMO...');
    
    if (window.completeMediaRichDemo) {
      console.log('🎬 Demo disponível - execute: window.completeMediaRichDemo.runQuickDemo()');
    }
    
    // 8. Testar configuração
    console.log('\n8️⃣ TESTANDO CONFIGURAÇÃO...');
    
    if (window.devMentorConfig) {
      const config = window.devMentorConfig.getConfig();
      console.log(`⚙️ Configuração: ${Object.keys(config).length} opções disponíveis`);
    }
    
    // 9. Testar índice
    console.log('\n9️⃣ TESTANDO ÍNDICE...');
    
    if (window.DevMentorIndex) {
      console.log(`📋 Índice: ${window.DevMentorIndex.info.totalComponents} componentes documentados`);
      console.log(`🎯 ${window.DevMentorIndex.info.totalFeatures} funcionalidades listadas`);
    }
    
    // 10. Resumo final
    console.log('\n🎉 === RESUMO DO TESTE ===');
    
    const componentesAtivos = componentes.filter(c => c.status).length;
    const totalComponentes = componentes.length;
    
    console.log(`📊 Componentes Ativos: ${componentesAtivos}/${totalComponentes}`);
    console.log(`🎯 Sistema Completo: ${status.allComponentsLoaded ? '✅' : '❌'}`);
    console.log(`📖 Explicação Rica: ${explicacao.length > 0 ? '✅' : '❌'}`);
    console.log(`🎨 Estilos CSS: ${status.stylesLoaded ? '✅' : '❌'}`);
    
    if (componentesAtivos >= 8) {
      console.log('\n🌟 SISTEMA FUNCIONANDO PERFEITAMENTE!');
      console.log('🚀 Pronto para hackathon e demonstrações!');
    } else if (componentesAtivos >= 5) {
      console.log('\n⭐ SISTEMA FUNCIONANDO PARCIALMENTE');
      console.log('🔧 Alguns componentes podem precisar de ajustes');
    } else {
      console.log('\n⚠️ SISTEMA COM PROBLEMAS');
      console.log('🛠️ Verifique a inicialização dos componentes');
    }
    
  } catch (error) {
    console.error('❌ Erro durante o teste:', error);
  }
}

// ========================================
// TESTE RÁPIDO
// ========================================

async function testeRapido() {
  console.log('⚡ === TESTE RÁPIDO ===\n');
  
  try {
    // Inicializar
    await window.DevMentorHelpers.initializeMediaRichSystem();
    
    // Verificar status
    const status = window.DevMentorHelpers.getMediaRichSystemStatus();
    console.log(`🎯 Sistema Completo: ${status.allComponentsLoaded ? '✅' : '❌'}`);
    
    // Testar explicação
    const explicacao = await window.DevMentorHelpers.generateRichExplanation(
      'console.log("test");',
      'complexity',
      'javascript',
      'beginner'
    );
    
    console.log(`📖 Explicação: ${explicacao.length > 0 ? '✅' : '❌'}`);
    console.log('🎉 Teste rápido concluído!');
    
  } catch (error) {
    console.error('❌ Erro no teste rápido:', error);
  }
}

// ========================================
// TESTE DE COMPONENTES ESPECÍFICOS
// ========================================

async function testarComponenteEspecifico(nomeComponente) {
  console.log(`🔍 === TESTANDO ${nomeComponente.toUpperCase()} ===\n`);
  
  switch (nomeComponente.toLowerCase()) {
    case 'citation':
      if (window.citationEngine) {
        const citacoes = await window.citationEngine.findCitations(
          [{ name: 'javascript', confidence: 0.8 }],
          'javascript'
        );
        console.log('📚 Citações encontradas:', Object.keys(citacoes).length);
      } else {
        console.log('❌ CitationEngine não disponível');
      }
      break;
      
    case 'metaphor':
      if (window.visualMetaphorEngine) {
        const metafora = window.visualMetaphorEngine.getMetaphor('async_await');
        console.log('🎨 Metáfora:', metafora?.metaphor || 'Não encontrada');
      } else {
        console.log('❌ VisualMetaphorEngine não disponível');
      }
      break;
      
    case 'diagram':
      if (window.diagramGenerator) {
        const diagrama = await window.diagramGenerator.autoGenerateDiagram(
          'if (true) { console.log("test"); }',
          'complexity'
        );
        console.log('📊 Diagrama:', diagrama?.type || 'Não gerado');
      } else {
        console.log('❌ DiagramGenerator não disponível');
      }
      break;
      
    case 'quiz':
      if (window.quizGenerator) {
        const quizzes = await window.quizGenerator.generateQuizzes(
          [{ name: 'async/await', confidence: 0.9 }],
          'intermediate'
        );
        console.log('✅ Quizzes:', quizzes.length);
      } else {
        console.log('❌ QuizGenerator não disponível');
      }
      break;
      
    case 'playground':
      if (window.interactivePlayground) {
        const playground = window.interactivePlayground.createPlayground(
          'console.log("Hello!");',
          'javascript'
        );
        console.log('🎮 Playground:', playground.length > 0 ? 'Criado' : 'Não criado');
      } else {
        console.log('❌ InteractivePlayground não disponível');
      }
      break;
      
    default:
      console.log('❌ Componente não reconhecido');
      console.log('Componentes disponíveis: citation, metaphor, diagram, quiz, playground');
  }
}

// ========================================
// TESTE DE PERFORMANCE
// ========================================

async function testarPerformance() {
  console.log('⚡ === TESTE DE PERFORMANCE ===\n');
  
  const inicio = performance.now();
  
  try {
    // Inicializar sistema
    const initStart = performance.now();
    await window.DevMentorHelpers.initializeMediaRichSystem();
    const initTime = performance.now() - initStart;
    console.log(`🚀 Inicialização: ${initTime.toFixed(2)}ms`);
    
    // Gerar explicação
    const explanationStart = performance.now();
    const explicacao = await window.DevMentorHelpers.generateRichExplanation(
      'function test() { return "hello"; }',
      'complexity',
      'javascript',
      'beginner'
    );
    const explanationTime = performance.now() - explanationStart;
    console.log(`📖 Explicação: ${explanationTime.toFixed(2)}ms`);
    
    // Testar componentes
    const componentsStart = performance.now();
    
    if (window.citationEngine) {
      await window.citationEngine.findCitations([{ name: 'test', confidence: 0.8 }], 'javascript');
    }
    
    if (window.visualMetaphorEngine) {
      window.visualMetaphorEngine.getMetaphor('async_await');
    }
    
    if (window.diagramGenerator) {
      await window.diagramGenerator.autoGenerateDiagram('console.log("test");', 'complexity');
    }
    
    const componentsTime = performance.now() - componentsStart;
    console.log(`🧩 Componentes: ${componentsTime.toFixed(2)}ms`);
    
    const totalTime = performance.now() - inicio;
    console.log(`⏱️ Tempo Total: ${totalTime.toFixed(2)}ms`);
    
    // Avaliar performance
    if (totalTime < 1000) {
      console.log('🌟 Performance Excelente!');
    } else if (totalTime < 3000) {
      console.log('⭐ Performance Boa');
    } else {
      console.log('⚠️ Performance pode ser melhorada');
    }
    
  } catch (error) {
    console.error('❌ Erro no teste de performance:', error);
  }
}

// ========================================
// EXPORTAR FUNÇÕES DE TESTE
// ========================================

window.DevMentorTests = {
  testarSistemaCompleto,
  testeRapido,
  testarComponenteEspecifico,
  testarPerformance
};

console.log('🧪 DevMentor Tests carregados!');
console.log('📋 Comandos disponíveis:');
console.log('  - window.DevMentorTests.testarSistemaCompleto()');
console.log('  - window.DevMentorTests.testeRapido()');
console.log('  - window.DevMentorTests.testarComponenteEspecifico("citation")');
console.log('  - window.DevMentorTests.testarPerformance()');







